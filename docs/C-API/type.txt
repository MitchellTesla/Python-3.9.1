Type Objects
************

PyTypeObject

   The C structure of the objects used to describe built-in types.

PyObject* PyType_Type

   This is the type object for type objects; it is the same object as
   "type" in the Python layer.

int PyType_Check(PyObject *o)

   Return non-zero if the object *o* is a type object, including
   instances of types derived from the standard type object.  Return 0
   in all other cases. This function always succeeds.

int PyType_CheckExact(PyObject *o)

   Return non-zero if the object *o* is a type object, but not a
   subtype of the standard type object.  Return 0 in all other cases.
   This function always succeeds.

unsigned int PyType_ClearCache()

   Clear the internal lookup cache. Return the current version tag.

unsigned long PyType_GetFlags(PyTypeObject* type)

   Return the "tp_flags" member of *type*. This function is primarily
   meant for use with *Py_LIMITED_API*; the individual flag bits are
   guaranteed to be stable across Python releases, but access to
   "tp_flags" itself is not part of the limited API.

   New in version 3.2.

   Changed in version 3.4: The return type is now "unsigned long"
   rather than "long".

void PyType_Modified(PyTypeObject *type)

   Invalidate the internal lookup cache for the type and all of its
   subtypes.  This function must be called after any manual
   modification of the attributes or base classes of the type.

int PyType_HasFeature(PyTypeObject *o, int feature)

   Return non-zero if the type object *o* sets the feature *feature*.
   Type features are denoted by single bit flags.

int PyType_IS_GC(PyTypeObject *o)

   Return true if the type object includes support for the cycle
   detector; this tests the type flag "Py_TPFLAGS_HAVE_GC".

int PyType_IsSubtype(PyTypeObject *a, PyTypeObject *b)

   Return true if *a* is a subtype of *b*.

   This function only checks for actual subtypes, which means that
   "__subclasscheck__()" is not called on *b*.  Call
   "PyObject_IsSubclass()" to do the same check that "issubclass()"
   would do.

PyObject* PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)
    *Return value: New reference.*

   Generic handler for the "tp_alloc" slot of a type object.  Use
   Python's default memory allocation mechanism to allocate a new
   instance and initialize all its contents to "NULL".

PyObject* PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)
    *Return value: New reference.*

   Generic handler for the "tp_new" slot of a type object.  Create a
   new instance using the type's "tp_alloc" slot.

int PyType_Ready(PyTypeObject *type)

   Finalize a type object.  This should be called on all type objects
   to finish their initialization.  This function is responsible for
   adding inherited slots from a type's base class.  Return "0" on
   success, or return "-1" and sets an exception on error.

void* PyType_GetSlot(PyTypeObject *type, int slot)

   Return the function pointer stored in the given slot. If the result
   is "NULL", this indicates that either the slot is "NULL", or that
   the function was called with invalid parameters. Callers will
   typically cast the result pointer into the appropriate function
   type.

   See "PyType_Slot.slot" for possible values of the *slot* argument.

   An exception is raised if *type* is not a heap type.

   New in version 3.4.

PyObject* PyType_GetModule(PyTypeObject *type)

   Return the module object associated with the given type when the
   type was created using "PyType_FromModuleAndSpec()".

   If no module is associated with the given type, sets "TypeError"
   and returns "NULL".

   This function is usually used to get the module in which a method
   is defined. Note that in such a method,
   "PyType_GetModule(Py_TYPE(self))" may not return the intended
   result. "Py_TYPE(self)" may be a *subclass* of the intended class,
   and subclasses are not necessarily defined in the same module as
   their superclass. See "PyCMethod" to get the class that defines the
   method.

   New in version 3.9.

void* PyType_GetModuleState(PyTypeObject *type)

   Return the state of the module object associated with the given
   type. This is a shortcut for calling "PyModule_GetState()" on the
   result of "PyType_GetModule()".

   If no module is associated with the given type, sets "TypeError"
   and returns "NULL".

   If the *type* has an associated module but its state is "NULL",
   returns "NULL" without setting an exception.

   New in version 3.9.


Creating Heap-Allocated Types
=============================

The following functions and structs are used to create heap types.

PyObject* PyType_FromModuleAndSpec(PyObject *module, PyType_Spec *spec, PyObject *bases)
    *Return value: New reference.*

   Creates and returns a heap type object from the *spec*
   ("Py_TPFLAGS_HEAPTYPE").

   If *bases* is a tuple, the created heap type contains all types
   contained in it as base types.

   If *bases* is "NULL", the *Py_tp_bases* slot is used instead. If
   that also is "NULL", the *Py_tp_base* slot is used instead. If that
   also is "NULL", the new type derives from "object".

   The *module* argument can be used to record the module in which the
   new class is defined. It must be a module object or "NULL". If not
   "NULL", the module is associated with the new type and can later be
   retreived with "PyType_GetModule()". The associated module is not
   inherited by subclasses; it must be specified for each class
   individually.

   This function calls "PyType_Ready()" on the new type.

   New in version 3.9.

PyObject* PyType_FromSpecWithBases(PyType_Spec *spec, PyObject *bases)
    *Return value: New reference.*

   Equivalent to "PyType_FromModuleAndSpec(NULL, spec, bases)".

   New in version 3.3.

PyObject* PyType_FromSpec(PyType_Spec *spec)
    *Return value: New reference.*

   Equivalent to "PyType_FromSpecWithBases(spec, NULL)".

PyType_Spec

   Structure defining a type's behavior.

   const char* PyType_Spec.name

      Name of the type, used to set "PyTypeObject.tp_name".

   int PyType_Spec.basicsize

   int PyType_Spec.itemsize

      Size of the instance in bytes, used to set
      "PyTypeObject.tp_basicsize" and "PyTypeObject.tp_itemsize".

   int PyType_Spec.flags

      Type flags, used to set "PyTypeObject.tp_flags".

      If the "Py_TPFLAGS_HEAPTYPE" flag is not set,
      "PyType_FromSpecWithBases()" sets it automatically.

   PyType_Slot *PyType_Spec.slots

      Array of "PyType_Slot" structures. Terminated by the special
      slot value "{0, NULL}".

PyType_Slot

   Structure defining optional functionality of a type, containing a
   slot ID and a value pointer.

   int PyType_Slot.slot

         A slot ID.

         Slot IDs are named like the field names of the structures
         "PyTypeObject", "PyNumberMethods", "PySequenceMethods",
         "PyMappingMethods" and "PyAsyncMethods" with an added "Py_"
         prefix. For example, use:

         * "Py_tp_dealloc" to set "PyTypeObject.tp_dealloc"

         * "Py_nb_add" to set "PyNumberMethods.nb_add"

         * "Py_sq_length" to set "PySequenceMethods.sq_length"

         The following fields cannot be set at all using "PyType_Spec"
         and "PyType_Slot":

         * "tp_dict"

         * "tp_mro"

         * "tp_cache"

         * "tp_subclasses"

         * "tp_weaklist"

         * "tp_vectorcall"

         * "tp_weaklistoffset" (see PyMemberDef)

         * "tp_dictoffset" (see PyMemberDef)

         * "tp_vectorcall_offset" (see PyMemberDef)

         The following fields cannot be set using "PyType_Spec" and
         "PyType_Slot" under the limited API:

         * "bf_getbuffer"

         * "bf_releasebuffer"

         Setting "Py_tp_bases" or "Py_tp_base" may be problematic on
         some platforms. To avoid issues, use the *bases* argument of
         "PyType_FromSpecWithBases()" instead.

      Changed in version 3.9: Slots in "PyBufferProcs" in may be set
      in the unlimited API.

   void *PyType_Slot.pfunc

      The desired value of the slot. In most cases, this is a pointer
      to a function.

      May not be "NULL".
